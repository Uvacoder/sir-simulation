{"version":3,"sources":["simulation.js"],"names":["SirSimulation","running","rate","cs","range","color","idToI","vacc","beta","gamma","interval","callback","current_inf","total_inf","day","init","counties","max_pop","d3","scale","pow","exponent","domain","init_cs","start","cid","n","c","get","inf","sus","rec","setInterval","update","that","i","length","da","db","step","flush","max","Math","pop","total_infected","total","map","set","id","sim","reset","clearInterval","County","coms","d","rgb","r","b","g","toString","select","style","com","ci","work_id","dx"],"mappings":"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","file":"simulation.2c95c8d0.js","sourceRoot":"..","sourcesContent":["function SirSimulation() {\n  this.running = false;\n  this.rate = 10;\n\n  this.cs;\n  this.range;\n  this.color;\n  this.idToI;\n\n  this.vacc;\n  this.beta;\n  this.gamma;\n\n  this.interval;\n\n  this.callback;\n  this.current_inf;\n  this.total_inf;\n  this.day = 1;\n\n  this.init = function(counties, beta, gamma, vacc, callback) {\n    this.cs = counties;\n    this.beta = beta / this.rate;\n    this.gamma = gamma / this.rate;\n    this.vacc = vacc;\n    this.callback = callback;\n    this.range = [0, this.max_pop()];\n    this.color = d3.scale\n      .pow()\n      .exponent(0.33)\n      .domain(this.range)\n      .range([\"#ffffff\", \"#08306b\"]);\n    this.init_cs();\n  };\n\n  this.start = function(cid, n) {\n    this.running = true;\n    const c = this.cs[this.idToI.get(cid)];\n    c.inf += n;\n    if (c.sus >= n) {\n      c.sus -= n;\n    } else {\n      c.rec -= n;\n    }\n    this.current_inf = n;\n    this.total_inf = n;\n    this.day = 0;\n    this.interval = setInterval(this.update, 1000 / this.rate, this);\n    this.update(this);\n  };\n\n  this.update = that => {\n    that.callback(that.current_inf, that.total_inf, that.day / that.rate);\n    let c;\n    for (var i = 0; i < that.cs.length; i++) {\n      c = that.cs[i];\n      c.da = 0;\n      c.db = 0;\n    }\n    for (var i = 0; i < that.cs.length; i++) {\n      c = that.cs[i];\n      if (c.inf > 0) {\n        c.step();\n      }\n    }\n    for (var i = 0; i < that.cs.length; i++) {\n      that.cs[i].flush();\n    }\n\n    that.day = that.day + 1;\n  };\n\n  this.max_pop = function() {\n    let max = 0;\n    for (let i = 0; i < this.cs.length; i++) {\n      max = Math.max(this.cs[i].pop, max);\n    }\n    return max;\n  };\n\n  this.total_infected = function() {\n    let total = 0;\n    for (let i = 0; i < this.cs.length; i++) {\n      total += this.cs[i].inf;\n    }\n    return total;\n  };\n\n  this.init_cs = function() {\n    this.idToI = d3.map();\n    let c;\n    for (let i = 0; i < this.cs.length; i++) {\n      c = this.cs[i];\n      this.idToI.set(c.id, i);\n      c.rec = c.pop * sim.vacc;\n      c.sus = c.pop - c.rec;\n      c.inf = 0;\n      c.init();\n    }\n  };\n\n  this.reset = function() {\n    clearInterval(this.interval);\n    this.callback(0, 0, 0);\n    this.running = false;\n  };\n}\n\nfunction County(i, id, pop, coms) {\n  this.i = i;\n  this.id = id;\n  this.pop = pop;\n  this.coms = coms;\n\n  this.color;\n\n  this.sus;\n  this.inf;\n  this.rec;\n\n  this.da;\n  this.db;\n\n  this.init = function() {\n    const c = sim.color(this.pop);\n    const d = d3.rgb(c);\n    d.r = d.b;\n    d.g = d.b;\n    d.b = 0;\n    this.color = d3.scale\n      .pow()\n      .exponent(0.2)\n      .domain([0, 1])\n      .range([c, d.toString()]);\n    d3.select(`#s${this.id}`).style(\"fill\", c);\n  };\n\n  this.step = function() {\n    for (let i = 0; i < this.coms.length; i++) {\n      const com = this.coms[i];\n      const ci = sim.idToI.get(+com.work_id);\n      const c = sim.cs[ci];\n      const n = +com.total;\n      const dx = sim.beta * this.inf * (n / this.pop) * (c.sus / c.pop);\n      c.da += dx;\n    }\n    this.da += sim.beta * this.inf * (this.sus / this.pop);\n    this.db += sim.gamma * this.inf;\n  };\n\n  this.flush = function() {\n    this.sus += -this.da;\n    this.inf += this.da - this.db;\n    this.rec += this.db;\n\n    sim.total_inf += this.da;\n    sim.current_inf += this.da - this.db;\n\n    d3.select(`#s${this.id}`).style(\"fill\", this.color(this.inf / this.pop));\n  };\n}\n\nconst sim = new SirSimulation();\n"]}